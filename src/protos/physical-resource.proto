syntax = "proto3";

package protos;

//Empty message   
message Empty { }

//just for request payload of patch method
message PatchPhysicalResourceMessage{
    // Unique identifier of the PhysicalResourceMessage task 
    string id = 1;

    // href of the PhysicalResourceMessage task 
    string href = 2;

    // description of the PhysicalResourceMessage task
    string description = 3;

    // name of the PhysicalResourceMessage task
    string name = 4;

    // resourceVersion of the PhysicalResourceMessage task
    int64 resourceVersion = 5;

    // ManufactureDate of the PhysicalResourceMessage task
    // message ManufactureDate{}
    // ManufactureDate manufactureDate =6;
    string  manufactureDate=6;

    // serialNumber of the PhysicalResourceMessage task
    string serialNumber =7 ;

    // versionNumber of the PhysicalResourceMessage task
    string versionNumber = 8;

    // @type of the PhysicalResourceMessage task
    string type = 9[json_name = "@type"];
    
    // @baseType of the PhysicalResourceMessage task
    string baseType = 10[json_name = "@baseType"];

    // @schemaLocation of the PhysicalResourceMessage task
    string schemaLocation = 11[json_name = "@schemaLocation"];

    // isBundle of the PhysicalResourceMessage task
    string isBundle = 30 ;

    // resourceAccess of the PhysicalResourceMessage task 
    string resourceAccess = 34[ json_name = "resourceAccess"];

    // isMNP of the PhysicalResourceMessage task 
    string isMNP = 32 ;

    // startOperatingDate of the PhysicalResourceMessage task 
    string startOperatingDate = 12;

    // endOperatingDate of the PhysicalResourceMessage task 
    string endOperatingDate = 13;

    // resourceRecycleDate of the PhysicalResourceMessage task 
    string resourceRecycleDate = 33;

    // operationalState of the PhysicalResourceMessage task 
    string operationalState = 14;

    // value of the PhysicalResourceMessage task 
    string value = 27;

    // resourceStatus of the PhysicalResourceMessage task  
    enum ResourceStatus {
        Created =1;
        Available = 2;
        Reserved = 3;
        Installing = 4;
        Operating = 5;
        Retired = 6;
        Pooled =7;
        Blocked=8;
    }
    string resourceStatus= 28;
    // BusinessType of the PhysicalResourceMessage task 
    repeated string businessType = 15;

     // Category of the PhysicalResourceMessage task 
      repeated string category = 16;

    // Cost of the PhysicalResourceMessage task 
    message Cost{
        int64 taxFreeValue = 1;
        int64 taxedValue = 2;
        string unit = 3;
    }

    Cost cost = 29;
    // Attachment of the PhysicalResourceMessage task
    message Attachment{
        string id = 1 ;
        string href = 2;
        string attachmentType = 3;
        string content = 4;
        string description = 5;
        string mimeType = 6;
        string name = 7;
        string url = 8;
        message Size{
            string amount = 1;
            string units = 2;
        }
        Size size = 9 [json_name = "size"];
        message ValidFor{
          string startDateTime = 1;
          string endDateTime = 2;
        }
        ValidFor validFor = 10 [json_name = "validFor"];
        string baseType = 11[json_name = "@baseType"];
        string type = 12[json_name = "@type"];
        string schemaLocation = 13[json_name = "@schemaLocation"];
        string referredType = 14[json_name = "@referredType"];
    }
    repeated Attachment attachment = 17;

    // Note of the PhysicalResourceMessage task
    message Note{
        string authorRole = 1;
        string author = 2;
        string date = 3;
        string  text = 4;
    }
    repeated Note note = 18  ;

    // Place of the PhysicalResourceMessage task
    repeated string place = 19 ;

    // RelatedParty of the PhysicalResourceMessage task
    message RelatedParty{
        string name = 1;
        string role = 2;
        string type = 3[json_name = "@type"];
        string baseType = 4[json_name = "@baseType"];
    }
    repeated RelatedParty relatedParty = 20 ;

    // ResourceCharacteristic of the PhysicalResourceMessage task
    message ResourceCharacteristic{
        string code = 1;
        string name = 2;
        bool publicIdentifier = 3;
        string value = 4;
        string valueType = 5;
    }
    repeated ResourceCharacteristic resourceCharacteristic = 21 ;

    // ResourceSpecification of the PhysicalResourceMessage task
      repeated string resourceSpecification = 22  ;

   // ProductOffering of the PhysicalResourceMessage task
       repeated string productOffering = 23  ;

    // ResourceRelationship of the PhysicalResourceMessage task
       message ResourceRelationship{
        enum RelationshipType {
            reliesOn = 1;
            bundle = 2;
            dependency = 3;
            starterPack =4;
            capacity=5;
            pool=6;
        }
        string relationshipType = 1;
        message ValidFor{
            string startDateTime = 1;
            string endDateTime = 2;
          }
          ValidFor validFor = 2 [json_name = "validFor"];
          message Resource{
            string id = 1;
          }
          Resource resource = 3 [json_name = "resource"];
    }
    repeated ResourceRelationship resourceRelationship = 31 ;

    // BundledResources of the PhysicalResourceMessage task
    message BundledResources {
           string id=1;
           string href=2;
           string type = 3 [json_name = "@type"];
           string baseType = 4 [json_name = "@baseType"];
           string schemaLocation = 5 [json_name = "@schemaLocation"];
    }
       repeated BundledResources bundledResources = 24;
}

// Taks we have to do
message PhysicalResourceMessage{
    // Unique identifier of the PhysicalResourceMessage task 
    string id = 1;

    // href of the PhysicalResourceMessage task 
    string href = 2;

    // description of the PhysicalResourceMessage task
    string description = 3;

    // name of the PhysicalResourceMessage task
    string name = 4;

    // resourceVersion of the PhysicalResourceMessage task
    int64 resourceVersion = 5;

    // ManufactureDate of the PhysicalResourceMessage task
    // message ManufactureDate{}
    // ManufactureDate manufactureDate =6;
    string  manufactureDate=6;

    // serialNumber of the PhysicalResourceMessage task
    string serialNumber =7 ;

    // versionNumber of the PhysicalResourceMessage task
    string versionNumber = 8;

    // @type of the PhysicalResourceMessage task
    string type = 9[json_name = "@type"];
    
    // @baseType of the PhysicalResourceMessage task
    string baseType = 10[json_name = "@baseType"];

    // @schemaLocation of the PhysicalResourceMessage task
    string schemaLocation = 11[json_name = "@schemaLocation"];

    // isBundle of the PhysicalResourceMessage task
    bool isBundle = 30 ;

    // resourceAccess of the PhysicalResourceMessage task 
    string resourceAccess = 34[ json_name = "resourceAccess"];

    // isMNP of the PhysicalResourceMessage task 
    bool isMNP = 32 ;

    // startOperatingDate of the PhysicalResourceMessage task 
    string startOperatingDate = 12;

    // endOperatingDate of the PhysicalResourceMessage task 
    string endOperatingDate = 13;

    // resourceRecycleDate of the PhysicalResourceMessage task 
    string resourceRecycleDate = 33;

    // operationalState of the PhysicalResourceMessage task 
    string operationalState = 14;

    // value of the PhysicalResourceMessage task 
    string value = 27;

    // resourceStatus of the PhysicalResourceMessage task  
    enum ResourceStatus {
        Created =1;
        Available = 2;
        Reserved = 3;
        Installing = 4;
        Operating = 5;
        Retired = 6;
        Pooled =7;
        Blocked=8;
    }
    string resourceStatus= 28;
    // BusinessType of the PhysicalResourceMessage task 
    repeated string businessType = 15;

     // Category of the PhysicalResourceMessage task 
      repeated string category = 16;

    // Cost of the PhysicalResourceMessage task 
    message Cost{
        int64 taxFreeValue = 1;
        int64 taxedValue = 2;
        string unit = 3;
    }

    Cost cost = 29;
    // Attachment of the PhysicalResourceMessage task
    message Attachment{
        string id = 1 ;
        string href = 2;
        string attachmentType = 3;
        string content = 4;
        string description = 5;
        string mimeType = 6;
        string name = 7;
        string url = 8;
        message Size{
            string amount = 1;
            string units = 2;
        }
        Size size = 9 [json_name = "size"];
        message ValidFor{
          string startDateTime = 1;
          string endDateTime = 2;
        }
        ValidFor validFor = 10 [json_name = "validFor"];
        string baseType = 11[json_name = "@baseType"];
        string type = 12[json_name = "@type"];
        string schemaLocation = 13[json_name = "@schemaLocation"];
        string referredType = 14[json_name = "@referredType"];
    }
    repeated Attachment attachment = 17;

    // Note of the PhysicalResourceMessage task
    message Note{
        string authorRole = 1;
        string author = 2;
        string date = 3;
        string  text = 4;
    }
    repeated Note note = 18  ;

    // Place of the PhysicalResourceMessage task
    repeated string place = 19 ;

    // RelatedParty of the PhysicalResourceMessage task
    message RelatedParty{
        string name = 1;
        string role = 2;
        string type = 3[json_name = "@type"];
        string baseType = 4[json_name = "@baseType"];
    }
    repeated RelatedParty relatedParty = 20 ;

    // ResourceCharacteristic of the PhysicalResourceMessage task
    message ResourceCharacteristic{
        string code = 1;
        string name = 2;
        bool publicIdentifier = 3;
        string value = 4;
        string valueType = 5;
    }
    repeated ResourceCharacteristic resourceCharacteristic = 21 ;

    // ResourceSpecification of the PhysicalResourceMessage task
      repeated string resourceSpecification = 22  ;

   // ProductOffering of the PhysicalResourceMessage task
       repeated string productOffering = 23  ;

    // ResourceRelationship of the PhysicalResourceMessage task
       message ResourceRelationship{
        enum RelationshipType {
            reliesOn = 1;
            bundle = 2;
            dependency = 3;
            starterPack =4;
            capacity=5;
            pool=6;
        }
        string relationshipType = 1;
        message ValidFor{
            string startDateTime = 1;
            string endDateTime = 2;
          }
          ValidFor validFor = 2 [json_name = "validFor"];
          message Resource{
            string id = 1;
          }
          Resource resource = 3 [json_name = "resource"];
    }
    repeated ResourceRelationship resourceRelationship = 31 ;

    // BundledResources of the PhysicalResourceMessage task
    message BundledResources {
           string id=1;
           string href=2;
           string type = 3 [json_name = "@type"];
           string baseType = 4 [json_name = "@baseType"];
           string schemaLocation = 5 [json_name = "@schemaLocation"];
    }
       repeated BundledResources bundledResources = 24;
}

message PhysicalResourceMessageForReadAll{
    // Unique identifier of the PhysicalResourceMessage task 
    string id = 1;

    // href of the PhysicalResourceMessage task 
    string href = 2;

    // description of the PhysicalResourceMessage task
    string description = 3;

    // name of the PhysicalResourceMessage task
    string name = 4;

    // resourceVersion of the PhysicalResourceMessage task
    int64 resourceVersion = 5;

    // ManufactureDate of the PhysicalResourceMessage task
    // message ManufactureDate{}
    // ManufactureDate manufactureDate =6;
    string  manufactureDate=6;

    // serialNumber of the PhysicalResourceMessage task
    string serialNumber =7 ;

    // versionNumber of the PhysicalResourceMessage task
    string versionNumber = 8;

    // @type of the PhysicalResourceMessage task
    string type = 9[json_name = "@type"];
    
    // @baseType of the PhysicalResourceMessage task
    string baseType = 10[json_name = "@baseType"];

    // @schemaLocation of the PhysicalResourceMessage task
    string schemaLocation = 11[json_name = "@schemaLocation"];

    // isBundle of the PhysicalResourceMessage task
    bool isBundle = 30 ;

    // resourceAccess of the PhysicalResourceMessage task 
    string resourceAccess = 34[ json_name = "resourceAccess"];

    // isMNP of the PhysicalResourceMessage task 
    bool isMNP = 32 ;

    // resourceRecycleDate of the PhysicalResourceMessage task 
    string resourceRecycleDate = 33;

    // startOperatingDate of the PhysicalResourceMessage task 
    string startOperatingDate = 12;

    // endOperatingDate of the PhysicalResourceMessage task 
    string endOperatingDate = 13;

    // operationalState of the PhysicalResourceMessage task 
    string operationalState = 14;

    // value of the PhysicalResourceMessage task 
    string value = 27;

    // resourceStatus of the PhysicalResourceMessage task  
    enum ResourceStatus {
        Created =1;
        Available = 2;
        Reserved = 3;
        Installing = 4;
        Operating = 5;
        Retired = 6;
        Pooled =7;
        Blocked=8;
    }
    string resourceStatus= 28;
    // BusinessType of the PhysicalResourceMessage task 
    repeated string businessType = 15;

    // Category of the PhysicalResourceMessage task 
    message Category {
        string id = 1;
        string name = 2;
        string href = 3;
        string version = 4;
        string code = 5;
        string description =6;
    }
     repeated Category category = 16;

    // Cost of the PhysicalResourceMessage task 
    message Cost{
        int64 taxFreeValue = 1;
        int64 taxedValue = 2;
        string unit = 3;
    }

    Cost cost = 29;
    // Attachment of the PhysicalResourceMessage task
    message Attachment{
        string id = 1 ;
        string href = 2;
        string attachmentType = 3;
        string content = 4;
        string description = 5;
        string mimeType = 6;
        string name = 7;
        string url = 8;
        message Size{
            string amount = 1;
            string units = 2;
        }
        Size size = 9 [json_name = "size"];
        message ValidFor{
          string startDateTime = 1;
          string endDateTime = 2;
        }
        ValidFor validFor = 10 [json_name = "validFor"];
        string baseType = 11[json_name = "@baseType"];
        string type = 12[json_name = "@type"];
        string schemaLocation = 13[json_name = "@schemaLocation"];
        string referredType = 14[json_name = "@referredType"];
    }
    repeated Attachment attachment = 17;

    // Note of the PhysicalResourceMessage task
    message Note{
        string authorRole = 1;
        string author = 2;
        string date = 3;
        string  text = 4;
    }
    repeated Note note = 18  ;

    // Place of the PhysicalResourceMessage task
    message Place{
        string id = 1;
        string href = 2;
        string name =3;
        string version = 4;
        string schemaLocation = 5[json_name = "@schemaLocation"];
        }
     repeated Place place = 19 ;

    // RelatedParty of the PhysicalResourceMessage task
    message RelatedParty{
        string name = 1;
        string role = 2;
        string type = 3[json_name = "@type"];
        string baseType = 4[json_name = "@baseType"];
    }
    repeated RelatedParty relatedParty = 20 ;

    // ResourceCharacteristic of the PhysicalResourceMessage task
    message ResourceCharacteristic{
        string code = 1;
        string name = 2;
        bool publicIdentifier = 3;
        string value = 4;
        string valueType = 5;
    }
    repeated ResourceCharacteristic resourceCharacteristic = 21 ;

    // ResourceSpecification of the PhysicalResourceMessage task
    message ResourceSpecification {
        string id=1;
        string href=2;
        string type = 3 [json_name = "@type"];
        string baseType = 4 [json_name = "@baseType"];
        string schemaLocation = 5 [json_name = "@schemaLocation"];
      }
      repeated ResourceSpecification resourceSpecification = 22  ;

   // ProductOffering of the PhysicalResourceMessage task
    message ProductOffering {
           string id=1;
           string href=2;
           string type = 3 [json_name = "@type"];
           string baseType = 4 [json_name = "@baseType"];
           string schemaLocation = 5 [json_name = "@schemaLocation"];
           string code=6;
           string name=7;
    }
       repeated ProductOffering productOffering = 23  ;

    // ResourceRelationship of the PhysicalResourceMessage task
       message ResourceRelationship{
        enum RelationshipType {
            reliesOn = 1;
            bundle = 2;
            dependency = 3;
            starterPack =4;
            capacity=5;
            pool=6;
        }
        string relationshipType = 1;
        message ValidFor{
            string startDateTime = 1;
            string endDateTime = 2;
          }
          ValidFor validFor = 2 [json_name = "validFor"];
          message Resource{
            string id = 1;
          }
          Resource resource = 3 [json_name = "resource"];
    }
    repeated ResourceRelationship resourceRelationship = 31 ;

    // BundledResources of the PhysicalResourceMessage task
    message BundledResources {
           string id=1;
           string href=2;
           string type = 3 [json_name = "@type"];
           string baseType = 4 [json_name = "@baseType"];
           string schemaLocation = 5 [json_name = "@schemaLocation"];
    }
       repeated BundledResources bundledResources = 24;
}
///////////////////////////////////////////

// Request data to read Service task
message ReadAllPhysicalResourceRequest{
    // To get selected attributes from DB rather than a full document, add these attributes separated by "," without a space between them
    // Example: 
    // resource/{UUID}?fieltds=name,description,state
    string fields = 2;
    // You can sort the documents based on one attribute descending by using "-" before the attribute or ascending by just typing the attribute
    // Example: 
    // resource/{UUID}?sort=-orderDate Or resource/{UUID}?sort=orderDate
    string sort = 3;
    // You can limit the number of fetched documents from DB by using limit keyword. The maximum number is 100!
    // Example: 
    // resource?limit=50
    string limit = 4;
    // You can skip some documents when reading from DB. It usually used with Limit keyword
    // Example: 
    // resource?limit=50&offset=10
    string offset = 5;
    // You can fetch documents from DB by using resourceStatus keyword. 
    // Example: 
    // resource?resourceStatus=Planning
    string resourceStatus  = 6;
    // Example: 
    // resource?type=MSISDN
    string type  = 7;

    // You can fetch documents from DB by using regex keyword. 
    // Example: 
    // "regex":"name.regex:^(074)([0-9]{8})$"
    string regex  = 8;

    // You can fetch documents from DB by using gt keyword. 
    // Example: 
    // "gt": "createdAt.gt:2020-12-01T14:18:59.389Z"
    string gt = 9;

    // You can fetch documents from DB by using gte keyword. 
    // Example: 
    // "gte": "createdAt.gte:2020-12-01T18:18:59.389Z"
    string gte = 10;

    // You can fetch documents from DB by using lt keyword. 
    // Example: 
    // "lt": "createdAt.lt:2020-11-26T13:39:40.345Z"
    string lt = 11;

    // You can fetch documents from DB by using lte keyword. 
    // Example: 
    // "lte": "createdAt.lte:2020-11-26T13:39:40.345Z"
    string lte = 12;

    string place = 13;
    
    string Query = 14;
    string resourceSpecification=15;
    string productOffering=16;
    string operationalState=17;
    string value = 18; 
    string resourceRecycleDate = 19;
    string endOperatingDate = 20;
}


// Response data to ReadAll Service task
message ReadAllPhysicalResourceResponse{
    repeated PhysicalResourceMessageForReadAll physicalResource = 1;
    int64 totalCount =2;
    int64 appLimit = 3;
 }

// Request data to Update Service task
 message UpdatePhysicalResourceRequest{
    PhysicalResourceMessage physicalResource = 1;
}

// Response data to Update Service task
message UpdatePhysicalResourceResponse{
    PhysicalResourceMessage physicalResource = 1;
}

// Request data to create new Service task
message CreatePhysicalResourceRequest{
    // Service entity to add
    PhysicalResourceMessage physicalResource = 1;
}

// Contains data of created Service task
message CreatePhysicalResourceResponse{
    // return of created PhysicalResource
    string id = 1;
}

// Request data to patch Service task
message PatchPhysicalResourceRequest{
    // To fetch a single order from DB using order ID in UUID v4 format
    // Examaple: 
    // resource/ce063db6-e717-4da4-aad2-6f44503c1e37
    string id = 1;
    string action = 2;
    PatchPhysicalResourceMessage physicalResource = 3;
}

message PatchByValuePhysicalResourceRequest{
    // To fetch a single order from DB using order ID in UUID v4 format
    // Examaple: 
    // resource/ce063db6-e717-4da4-aad2-6f44503c1e37
    string value = 1;
    string type = 2;
    string action = 3;
    PhysicalResourceMessage physicalResource = 4;
}

// Response data to patch Service task
message PatchPhysicalResourceResponse{
    // Task entity read by ID
    PhysicalResourceMessage physicalResource = 1;
}

// Request data to read Service task
message ReadPhysicalResourceRequest{
    // To fetch a single order from DB using order ID in UUID v4 format
    // Examaple: 
    // resource/ce063db6-e717-4da4-aad2-6f44503c1e37
    string id = 1;
    // To get selected attributes from DB rather than a full document, add these attributes separated by "," without a space between them
    // Example: 
    // resource/{UUID}?fieltds=name,description,state
    string fields = 2;
    // You can sort the documents based on one attribute descending by using "-" before the attribute or ascending by just typing the attribute
    // Example: 
    // resource/{UUID}?sort=-orderDate Or resource/{UUID}?sort=orderDate
    string sort = 3;
}

// Contains Service task data specified in by ID request
message ReadPhysicalResourceResponse{
    // Task entity read by ID
    PhysicalResourceMessageForReadAll physicalResource = 1;
}

// Get Physical Resource by ID
message PhysicalResourceId {
    string id = 1;
}

// Get response of Delete Physical Resource
message DeletePhysicalResourceResponse {
    string result = 1;
}


// Get Physical Resource by Value
message PhysicalResourceValue {
    string value = 1;
    string type = 2;
}

//Service of physicalResource 
service PhysicalResource{
    rpc ReadAll(ReadAllPhysicalResourceRequest)returns(ReadAllPhysicalResourceResponse){ }
    rpc Create(CreatePhysicalResourceRequest)returns(CreatePhysicalResourceResponse){ }
    rpc Update(UpdatePhysicalResourceRequest)returns(UpdatePhysicalResourceResponse){ }
    rpc Patch(PatchPhysicalResourceRequest)returns(PatchPhysicalResourceResponse){ }
    rpc Delete(PhysicalResourceId)returns(DeletePhysicalResourceResponse){ }
    rpc ReadById (PhysicalResourceId) returns (ReadPhysicalResourceResponse) {}
    rpc GetByValue(PhysicalResourceValue)returns(ReadAllPhysicalResourceResponse){ }
    rpc DeleteByValue(PhysicalResourceValue)returns(DeletePhysicalResourceResponse){ }
    rpc PatchByValue(PatchByValuePhysicalResourceRequest) returns (PatchPhysicalResourceResponse) {}
    rpc PatchByAvailableValue(PatchByValuePhysicalResourceRequest) returns (PatchPhysicalResourceResponse) {}
    rpc QueryAndUpdate(PatchPhysicalResourceRequest)returns(PatchPhysicalResourceResponse){ }
}
