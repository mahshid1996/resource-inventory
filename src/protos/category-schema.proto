syntax = "proto3";

package protos;

//Empty message   
message Empty { }

// Taks we have to do
message CategorySchemaMessage{
    // Unique identifier of the CategorySchemaMessage task 
    string id = 1;

    // href of the CategorySchemaMessage task  
    string href = 2;

    // description of the CategorySchemaMessage task 
    string description = 3;

    // name of of the CategorySchemaMessage task 
    string name = 4;

    // code of the CategorySchemaMessage task 
    string code = 5;

    // version of the CategorySchemaMessage task 
    string version = 6;

    // resourceSchema of the CategorySchemaMessage task  
    message ResourceSchema{
        string schema = 1;

        message Properties {
            //href
            message Href {
                string type = 1;
                string pattern = 2;
            }
            Href href = 1;

            //name
            message Name {
                string type = 1;
                string pattern = 2;
            }
            Name name = 2;

            //description
            message Description {
                string type = 1;
                string pattern = 2;
            }
            Description description = 3;


            
            //type
            message Type {
                string type = 1;
                string pattern = 2;
            }
            Type type = 4;

            //baseType
            message BaseType {
                string type = 1;
                string pattern = 2;
            }
            BaseType baseType = 5;
            
            //schemaLocation
            message SchemaLocation {
                string type = 1;
                string pattern = 2;
            }
            SchemaLocation schemaLocation = 6;

            //value
            message Value {
                string type = 1;
                string pattern = 2;
            }
            Value value = 7;

           

            //isBundle
            bool isBundle = 8 ;

             //isBundle
             bool isMNP = 9 ;
            
            //operationalState
            message OperationalState {
                string type = 1;
                string pattern = 2;
            }
            OperationalState operationalState = 10;

           //resourceStatus
           message ResourceStatus {
            string type = 1;
            string pattern = 2;
        }
        ResourceStatus resourceStatus = 11;

             //businessType
             message BusinessType {
                string type = 1;
                message Items{
                    string type = 1;                   
                }
                repeated Items items = 2  ;
            }
            BusinessType businessType = 12;

            //category
            repeated string category = 13;

            //cost
            message Cost {
                string type = 1;
                message Properties {
                    message TaxFreeValue {
                        string type = 1;
                        string pattern = 2;
                    }
                    TaxFreeValue taxFreeValue = 1;
                    message TaxedValue {
                        string type = 1;
                        string pattern = 2;
                    }
                    TaxedValue taxedValue = 2;
                    message Unit {
                        string type = 1;
                        string pattern = 2;
                    }
                    Unit unit = 3;
                }
                Properties properties = 2 ;
                enum Required {
                    taxFreeValue = 1;
                    taxedValue = 2;
                    unit = 3;
                }
                repeated Required required = 3;
            }
            Cost cost = 14 ;

            //attachment
            message Attachment {
                string type = 1;
                repeated string items = 2;
            }
            Attachment attachment = 15;

            //place
            repeated string place = 16;

            //relatedParty
            message RelatedParty {
                string type = 1;
                message Items{
                    string type = 1;

                    message Properties {
                        message Name {
                            string type = 1;
                            string pattern = 2;
                        }
                        Name name = 1;

                        message Role {
                            string type = 1;
                            string pattern = 2;
                        }
                        Role role = 2;

                        message Type {
                            string type = 1;
                            string pattern = 2;
                        }
                        Type type = 3;


                        message BaseType {
                            string type = 1;
                            string pattern = 2;
                        }
                        BaseType baseType = 4;

                       

                    }
                    Properties properties = 2;
                    enum Required {
                        name = 1;
                        role = 2;
                        type = 3;
                        baseType = 4;
                    }
                    repeated Required required = 3;
                }
                repeated Items items = 2  ;
            }
            RelatedParty relatedParty = 17;

           
            //resourceCharacteristic
            message ResourceCharacteristic {
                string type = 1;
                message Items{
                    string type = 1;

                    message Properties {

                        message Code {
                            string type = 1;
                            string pattern = 2;
                            string default = 3;
                        }
                        Code code = 1;

                        message Name {
                            string type = 1;
                            string pattern = 2;
                        }
                        Name name = 2;

                        message PublicIdentifier {
                            string type = 1;
                            string pattern = 2;
                        }
                        PublicIdentifier publicIdentifier = 3;

                        message Value {
                            string type = 1;
                            string pattern = 2;
                            
                        }
                        Value value = 4;

                        message ValueType {
                            string type = 1;
                            string pattern = 2;
                        }
                        ValueType valueType = 5;

                    }
                    Properties properties = 2;

                    enum Required {
                        code = 1;
                        name = 2;
                        publicIdentifier = 3;
                        value= 4;
                        valueType = 5;
                    }
                    repeated Required required = 3;

                }
                repeated Items items = 2  ;
            }
            ResourceCharacteristic resourceCharacteristic = 18 ;

            //resourceSpecification
            repeated string resourceSpecification = 19;

            //productOffering
            repeated string productOffering = 20;

            //bundledResources
            message BundledResources {
                string type = 1;
                message Items{
                    string type = 1;
                    message Properties {
                        message Id {
                            string type = 1;
                            string pattern = 2;
                        }
                        Id id = 1;

                        message Href {
                            string type = 1;
                            string pattern = 2;
                        }
                        Href href = 2;


                        message Type {
                            string type = 1;
                            string pattern = 2;
                        }
                        Type type = 3;

                        message BaseType {
                            string type = 1;
                            string pattern = 2;
                        }
                        BaseType baseType = 4;

                        

                        message SchemaLocation {
                            string type = 1;
                            string pattern = 2;
                        }
                        SchemaLocation schemaLocation = 5;

                        message Characteristics{
                            string default = 1;
                            string type = 2;
                            string pattern = 3;
                        }
                        Characteristics characteristics =6;
                        
                    }
                    Properties properties = 2;

                    enum Required {
                        id = 1;
                        href = 2;
                        type = 3;
                        baseType= 4;
                        schemaLocation = 5;
                    }
                    repeated Required required = 3;
                }
                repeated Items items = 2  ;
            }
            BundledResources bundledResources = 21 ;


              //resourceVersion
              message ResourceVersion {
                string type = 1;
                string pattern = 2;
            }
            ResourceVersion resourceVersion = 22;

             //note
             message Note {
                string type = 1;
                message Items{
                    string type = 1;
                    message Properties {
                        message AuthorRole {
                            string type = 1;
                            string pattern = 2;
                        }
                        AuthorRole authorRole = 1;

                        message Author {
                            string type = 1;
                            string pattern = 2;
                        }
                        Author author = 2;


                        message Date {
                            string type = 1;
                            string pattern = 2;
                        }
                        Date date = 3;

                        message Text {
                            string type = 1;
                            string pattern = 2;
                        }
                        Text text = 4;
 
                    }
                    Properties properties = 2;

                    enum Required {
                        AuthorRole = 1;
                        author = 2;
                        date = 3;
                        text= 4;
                     
                    }
                    repeated Required required = 3;
                }
                repeated Items items = 2  ;
            }
            Note note = 23 ;

        }
        Properties properties = 2 ;

        enum Required {
            href = 1;
            name = 2;
            description = 3;
            type = 4; 
            baseType = 5; 
            schemaLocation = 6; 
            value = 7; 
            isBundle = 8; 
            isMNP = 9; 
            operationalState = 10; 
            resourceStatus = 11; 
            businessType = 12;   
            category = 13; 
            cost = 14;
            attachment = 15;
            place = 16;
            relatedParty = 17;
            resourceCharacteristic = 18;
            resourceSpecification = 19;
            productOffering = 20;
            bundledResources = 21;
            resourceVersion = 22;
            note = 23;
        }
        repeated Required required = 3;

        string type = 4[json_name = "@type"];

    }
    ResourceSchema resourceSchema = 7 ;

}

///////////////////////////////////////////

// Request data to read Service task
message ReadAllCategorySchemaRequest{
    // To get selected attributes from DB rather than a full document, add these attributes separated by "," without a space between them
    // You can sort the documents based on one attribute descending by using "-" before the attribute or ascending by just typing the attribute
    // Example: 
    // resource/{UUID}?sort=-orderDate Or resource/{UUID}?sort=orderDate
    string sort = 3;
    // You can limit the number of fetched documents from DB by using limit keyword. The maximum number is 100!
    // Example: 
    // resource?limit=50
    string limit = 4;
    // You can skip some documents when reading from DB. It usually used with Limit keyword
    // Example: 
    // resource?limit=50&offset=10
    string offset = 5;

    // You can fetch documents from DB by using regex keyword. 
    // Example: 
    // "regex":"name.regex:^(074)([0-9]{8})$"
    string regex  = 8;

    // You can fetch documents from DB by using gt keyword. 
    // Example: 
    // "gt": "createdAt.gt:2020-12-01T14:18:59.389Z"
    string gt = 9;

    // You can fetch documents from DB by using gte keyword. 
    // Example: 
    // "gte": "createdAt.gte:2020-12-01T18:18:59.389Z"
    string gte = 10;

    // You can fetch documents from DB by using lt keyword. 
    // Example: 
    // "lt": "createdAt.lt:2020-11-26T13:39:40.345Z"
    string lt = 11;

    // You can fetch documents from DB by using lte keyword. 
    // Example: 
    // "lte": "createdAt.lte:2020-11-26T13:39:40.345Z"
    string lte = 12;
}

// Response data to ReadAll Service task
message ReadAllCategorySchemaResponse{
    repeated CategorySchemaMessage categorySchema = 1;
 }

// Request data to Update Service task
 message UpdateCategorySchemaRequest{
    CategorySchemaMessage categorySchema = 1;
}

// Response data to Update Service task
message UpdateCategorySchemaResponse{
    CategorySchemaMessage categorySchema = 1;
}

// Request data to create new Service task
message CreateCategorySchemaRequest{
    // Service entity to add
    CategorySchemaMessage categorySchema = 1;
}

// Contains data of created Service task
message CreateCategorySchemaResponse{
    // return of created CategorySchema
    string id = 1;
}

// Request data to patch Service task
message PatchCategorySchemaRequest{
    // To fetch a single order from DB using order ID in UUID v4 format
    // Examaple: 
    // resource/ce063db6-e717-4da4-aad2-6f44503c1e37
    string id = 1;
    string action = 2;
    CategorySchemaMessage categorySchema = 3;
}

// Response data to patch Service task
message PatchCategorySchemaResponse{
    // Task entity read by ID
    CategorySchemaMessage categorySchema = 1;
}


// Contains Service task data specified in by ID request
message ReadCategorySchemaResponse{
    // Task entity read by ID
    CategorySchemaMessage categorySchema = 1;
}

// Get CategorySchema by ID
message CategorySchemaId {
    string id = 1;
}

// Get response of Delete CategorySchema
message DeleteCategorySchemaResponse {
    string result = 1;
}

//Service of CategorySchema
service CategorySchema{
    rpc ReadAll(ReadAllCategorySchemaRequest)returns(ReadAllCategorySchemaResponse){ }
    rpc Create(CreateCategorySchemaRequest)returns(CreateCategorySchemaResponse){ }
    rpc Update(UpdateCategorySchemaRequest)returns(UpdateCategorySchemaResponse){ }
    rpc Patch(PatchCategorySchemaRequest)returns(PatchCategorySchemaResponse){ }
    rpc Delete(CategorySchemaId)returns(DeleteCategorySchemaResponse){ }
    rpc ReadById (CategorySchemaId) returns (ReadCategorySchemaResponse) {}
}