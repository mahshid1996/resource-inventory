syntax = "proto3";

package protos;
//import "google/protobuf/any.proto";

//Empty message   
  message Empty {}
  //message id{}
//Message for the reservation 
message ReservationMessage {

   string id = 1; 
   string href = 2;
   string description = 3;

  message VALID_FOR {
     string startDate = 1;
     string endDate = 2;
  }

  optional VALID_FOR valid_for = 4;

   enum ReservationState {
      Initial = 1;
      InProgress = 2;
      Completed = 3;
      Cancelled = 4;
      Rejected = 5;
  }
   string reservationState = 5;

  message RELATEDPARTY {
     string partyRole = 1;
     string partyId = 2;
  }

  optional RELATEDPARTY relatedParty = 6;

  message PRODUCTOFFERING {
    string id = 1;
    string href = 2;
     string name = 3;
     string description = 4;
  }

  optional  PRODUCTOFFERING productOffering = 7;
   string schemaLocation = 8 [json_name = "@schemaLocation"]; 
   string type = 9 [json_name = "@type"];

  message ResourceReservationItem {
     double quantity = 1;

    message Items {

      message ResourceCapacityDemand {
         double resourceCapacityDemandAmount = 1;

        message ApplicableTimePeriod {
           string from = 1;
           string to = 2;
        }

        optional ApplicableTimePeriod applicableTimePeriod = 2;

        message Place {
           string id = 1;
           string type = 2 [json_name = "@type"];
           string name = 3;
        }

        optional Place place = 3;

        message ResourcePool {
          string id = 1;
          string href = 2;
        }

        optional ResourcePool resourcePool = 4;
         string type = 5 [json_name = "@type"];
      }

      ResourceCapacityDemand resourceCapacityDemand = 1;

      message AppliedResourceCapacity {
         string appliedCapacityAmount = 1;

        message Resource {
           string id = 1;
           string href = 2;
           string referredType  = 3;
           string value = 4;
        }

        repeated Resource resource = 2;
      }
     
      AppliedResourceCapacity appliedResourceCapacity = 2;
       string subReservationState = 3;
    }

    repeated Items items = 2;
  }

  ResourceReservationItem resourceReservationItem = 10;

  message RequestedPeriod {
     string startDate = 1;
     string endDate = 2;
  }

  RequestedPeriod requestedPeriod = 11;

  string version = 12;
  string reason = 13;
  }

///////////////////////////////////////////

// Request data to read Service task
message ReadAllReservationRequest{
   // To get selected attributes from DB rather than a full document, add these attributes separated by "," without a space between them
   // Example: 
   // resource/{UUID}?fieltds=name,description,state
   string fields = 2;
   // You can sort the documents based on one attribute descending by using "-" before the attribute or ascending by just typing the attribute
   // Example: 
   // resource/{UUID}?sort=-orderDate Or resource/{UUID}?sort=orderDate
   string sort = 3;
   // You can limit the number of fetched documents from DB by using limit keyword. The maximum number is 100!
   // Example: 
   // resource?limit=50
   string limit = 4;
   // You can skip some documents when reading from DB. It usually used with Limit keyword
   // Example: 
   // resource?limit=50&offset=10
   string offset = 5;


    // You can fetch documents from DB by using regex keyword. 
    // Example: 
    // "regex":"name.regex:^(074)([0-9]{8})$"
    string regex  = 6;
}

// Response data to ReadAll Service task
message ReadAllReservationResponse{
   repeated ReservationMessage reservation = 1;
}

// Request data to Update Service task
message UpdateReservationRequest{
   ReservationMessage reservation = 1;
}

// Response data to Update Service task
message UpdateReservationResponse{
   ReservationMessage reservation = 1;
}

// Request data to create new Service task
message CreateReservationRequest{
   // Service entity to add
   ReservationMessage reservation = 1;
}

// Contains data of created Service task
message CreateReservationResponse{
   // return of created Reservation
   string id = 1;
}

// Request data to patch Service task
message PatchReservationRequest{
   // To fetch a single order from DB using order ID in UUID v4 format
   // Examaple: 
   // resource/ce063db6-e717-4da4-aad2-6f44503c1e37
   string id = 1;
   string action = 2;
   ReservationMessage reservation = 3;
 }
 
 // Response data to patch Service task
 message PatchReservationResponse{
   // Task entity read by ID
   ReservationMessage reservation = 1;
 }

// Request data to read Service task
message ReadReservationRequest{
   // To fetch a single order from DB using order ID in UUID v4 format
   // Examaple: 
   // resource/ce063db6-e717-4da4-aad2-6f44503c1e37
   string id = 1;
   // To get selected attributes from DB rather than a full document, add these attributes separated by "," without a space between them
   // Example: 
   // resource/{UUID}?fieltds=name,description,state
   string fields = 2;
   // You can sort the documents based on one attribute descending by using "-" before the attribute or ascending by just typing the attribute
   // Example: 
   // resource/{UUID}?sort=-orderDate Or resource/{UUID}?sort=orderDate
   string sort = 3;
}

// Contains Service task data specified in by ID request
message ReadReservationResponse{
   // Task entity read by ID
   ReservationMessage reservation = 1;
}

// Get Logical Resource by ID
message ReservationId {
   string id = 1;
}

// Get response of Delete Logical Resource
message DeleteReservationResponse {
   string result = 1;
}

//Service of Reservation 
service Reservation{
   rpc ReadAll(ReadAllReservationRequest)returns(ReadAllReservationResponse){ }
   rpc Create(CreateReservationRequest)returns(CreateReservationResponse){ }
   rpc Update(UpdateReservationRequest)returns(UpdateReservationResponse){ }
   rpc Patch(PatchReservationRequest)returns(PatchReservationResponse){ }
   rpc Delete(ReservationId)returns(DeleteReservationResponse){ }
   rpc ReadById (ReservationId) returns (ReadReservationResponse) {}
}