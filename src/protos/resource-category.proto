syntax = "proto3";

package protos;

//Empty message   
message Empty { }

// Taks we have to do
message ResourceCategoryMessage{
  // Unique identifier of the ResourceCategoryMessage task 
    string id = 1;

    // href of the ResourceCategoryMessage task
    string href = 2;

    // description of the ResourceCategoryMessage task
    string description = 3;

    // name of the ResourceCategoryMessage task
    string name = 4;

    // code of the ResourceCategoryMessage task
    string code = 5;

    // @type of the ResourceCategoryMessage task
    string type = 6[json_name = "@type"];

    // @baseType of the ResourceCategoryMessage task
    string baseType = 7[json_name = "@baseType"];

    // @schemaLocation of the ResourceCategoryMessage task
    string schemaLocation = 8[json_name = "@schemaLocation"];

    // isBundle of the ResourceCategoryMessage task
    bool isBundle = 16 ;

    // version of the ResourceCategoryMessage task
    int64 version = 9;

    // category of the ResourceCategoryMessage task
    message Category{
      string id = 1;
      
      }
    repeated Category category = 17 ;

    // ValidFor of the ResourceCategoryMessage task
    message ValidFor{
      string startDateTime = 1;
      string endDateTime = 2;
    }
    
    ValidFor validFor = 10 [json_name = "validFor"];

    // LifecycleStatus of the ResourceCategoryMessage task
      enum LifecycleStatus {
        Initial = 1;
        InStudy = 2;
        InDesign = 3;
        InTest = 4;
        Active = 5;
        Launched = 6; 
        Rejected = 7;
        Retired = 8;
        Obsolete = 9;
    }
    string lifecycleStatus =19;
// realizingResourceType of the ResourceCategoryMessage task
    
    enum RealizingResourceType {
      logicalResource = 1;
      physicalResource = 2;
      nonSerializedResource = 3;
  }
  string realizingResourceType =20;

    // lastUpdate of the ResourceCategoryMessage task
 string lastUpdate = 11;

 // isRoot of the ResourceCategoryMessage task
 bool isRoot = 12; 

 // parentId of the ResourceCategoryMessage task
 string parentId = 13;

// // Category of the ResourceCategoryMessage task
//   message Category{
//     string id = 1;
//     string href = 2;
//     string name = 3;
//   }
// repeated Category category= 14;

// RelatedParty of the ResourceCategoryMessage task
message RelatedParty{
    string id = 1;
    string href = 2;
    string role = 3;
    string name = 4;
  }
repeated RelatedParty relatedParty= 15;
   
}

///////////////////////////////////////////

// Request data to read Service task
message ReadAllResourceCategoryRequest{
  // To get selected attributes from DB rather than a full document, add these attributes separated by "," without a space between them
  // Example: 
  // resource/{UUID}?fieltds=name,description,state
  string fields = 2;
  // You can sort the documents based on one attribute descending by using "-" before the attribute or ascending by just typing the attribute
  // Example: 
  // resource/{UUID}?sort=-orderDate Or resource/{UUID}?sort=orderDate
  string sort = 3;
  // You can limit the number of fetched documents from DB by using limit keyword. The maximum number is 100!
  // Example: 
  // resource?limit=50
  string limit = 4;
  // You can skip some documents when reading from DB. It usually used with Limit keyword
  // Example: 
  // resource?limit=50&offset=10
  string offset = 5;
  // Example: 
  // resource?type=MSISDN
  string type  = 6;


    // You can fetch documents from DB by using regex keyword. 
    // Example: 
    // "regex":"name.regex:^(074)([0-9]{8})$"
    string regex  = 7;

    // You can fetch documents from DB by using gt keyword. 
    // Example: 
    // "gt": "createdAt.gt:2020-12-01T14:18:59.389Z"
    string gt = 8;

    // You can fetch documents from DB by using gte keyword. 
    // Example: 
    // "gte": "createdAt.gte:2020-12-01T18:18:59.389Z"
    string gte = 9;

    // You can fetch documents from DB by using lt keyword. 
    // Example: 
    // "lt": "createdAt.lt:2020-11-26T13:39:40.345Z"
    string lt = 10;

    // You can fetch documents from DB by using lte keyword. 
    // Example: 
    // "lte": "createdAt.lte:2020-11-26T13:39:40.345Z"
    string lte = 11;
    string Query = 12;

}

// Response data to ReadAll Service task
message ReadAllResourceCategoryResponse{
  repeated ResourceCategoryMessage resourceCategory = 1;
}

// Request data to Update Service task
message UpdateResourceCategoryRequest{
  ResourceCategoryMessage resourceCategory = 1;
}

// Response data to Update Service task
message UpdateResourceCategoryResponse{
  ResourceCategoryMessage resourceCategory = 1;
}

// Request data to create new Service task
message CreateResourceCategoryRequest{
  // Service entity to add
  ResourceCategoryMessage resourceCategory = 1;
}

// Contains data of created Service task
message CreateResourceCategoryResponse{
  // return of created ResourceCategory
  string id = 1;
}

// Request data to read Service task
message ReadResourceCategoryRequest{
  // To fetch a single order from DB using order ID in UUID v4 format
  // Examaple: 
  // resource/ce063db6-e717-4da4-aad2-6f44503c1e37
  string id = 1;
  // To get selected attributes from DB rather than a full document, add these attributes separated by "," without a space between them
  // Example: 
  // resource/{UUID}?fieltds=name,description,state
  string fields = 2;
  // You can sort the documents based on one attribute descending by using "-" before the attribute or ascending by just typing the attribute
  // Example: 
  // resource/{UUID}?sort=-orderDate Or resource/{UUID}?sort=orderDate
  string sort = 3;
  string Query = 4;
  string limit = 5;
}

// Contains Service task data specified in by ID request
message ReadResourceCategoryResponse{
  // Task entity read by ID
  ResourceCategoryMessage resourceCategory = 1;
}

// Request data to patch Service task
message PatchResourceCategoryRequest{
    // To fetch a single order from DB using order ID in UUID v4 format
    // Examaple: 
    // resource/ce063db6-e717-4da4-aad2-6f44503c1e37
    string id = 1;
    string action = 2;
    ResourceCategoryMessage resourceCategory = 3;
}

// Response data to patch Service task
message PatchResourceCategoryResponse{
    // Task entity read by ID
    ResourceCategoryMessage resourceCategory = 1;
}

// Get Resource Categoryd by ID
message ResourceCategoryId {
  string id = 1;
}

// Get response of Delete Resource Category
message DeleteResourceCategoryResponse {
  string result = 1;
}

//Service of ResourceCategory 
service ResourceCategory{
  rpc ReadAll(ReadAllResourceCategoryRequest)returns(ReadAllResourceCategoryResponse){ }
  rpc Create(CreateResourceCategoryRequest)returns(CreateResourceCategoryResponse){ }
  rpc Update(UpdateResourceCategoryRequest)returns(UpdateResourceCategoryResponse){ }
  rpc Patch(PatchResourceCategoryRequest)returns(PatchResourceCategoryResponse){ }
  rpc Delete(ResourceCategoryId)returns(DeleteResourceCategoryResponse){ }
  rpc ReadById (ResourceCategoryId) returns (ReadResourceCategoryResponse) {}
}

